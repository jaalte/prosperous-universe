import json
from prunpy.utils.resource_list import ResourceList


class XITAction:
    def __init__(self, name=None, resources=None, exchange_code="NC1", transfer=True):
        if name is None:
            name = "Autogenerated Buy Action"
        
        self.name = name
        self.exchange_code = exchange_code
        self.transfer = transfer
        
        if isinstance(resources, ResourceList):
            self.resources = resources
        elif isinstance(resources, dict):
            self.resources = ResourceList(resources)
        elif resources is None:
            self.resources = ResourceList({})
        else:
            raise TypeError(f"Unsupported resources type: {type(resources)}")
        
        self._warehouse_names = {
            "NC1": "Moria Station Warehouse",
            "AI1": "Antares Station Warehouse", 
            "CI1": "Benten Station Warehouse",
            "IC1": "Hortus Station Warehouse",
            "NC2": "Hubur Warehouse",
            "CI2": "Arclight Warehouse",
        }
    
    @property
    def json(self):
        json_data = {
            "global": {
                "name": self.name
            },
            "groups": [
                {
                    "name": "Resources",
                    "type": "Manual",
                    "materials": self.resources.resources,
                }
            ],
            "actions": [
                {
                    "name": "Purchase",
                    "type": "CX Buy",
                    "group": "Resources",
                    "exchange": self.exchange_code,
                    "useCXInv": True,
                    "buyPartial": True,
                    "priceLimits": {}
                },
            ]
        }
        
        if self.transfer:
            warehouse = self._warehouse_names[self.exchange_code]
            json_data["actions"].append({
                "name": "Transfer",
                "type": "MTRA", 
                "group": "Resources",
                "origin": warehouse,
                "dest": "Configure on Execution"
            })
        
        return json_data
    
    def copy(self):
        return XITAction(
            name=self.name,
            resources=self.resources.copy(),
            exchange_code=self.exchange_code,
            transfer=self.transfer
        )
    
    def __str__(self):
        return f"XITAction('{self.name}', {len(self.resources)} materials, {self.exchange_code})"